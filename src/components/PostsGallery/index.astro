---
import CardEntry from "@components/common/CardEntry.astro";
import CATEGORIES from "src/content/website/categories.json";
import { getCollection } from "astro:content";

const allPosts = await getCollection("blog");
let selectedCategory = null;
---

<style>
  .container {
    display: flex;
  }
  .categories {
    width: 25%;
    transition: all 0.3s ease;
  }
  .categories.hidden {
    display: none;
  }
  .categories.visible {
    display: block;
  }
  .categories .selected {
    background-color: purple;
    color: white;
    transition: background-color 0.3s ease;
  }
  .posts {
    flex: 1;
  }
  .hamburger {
    display: none;
    cursor: pointer;
  }
  @media (max-width: 1000px) {
    .categories {
      display: none;
    }
    .hamburger {
      display: block;
    }
  }
</style>

<div class="container">
  <div id="posts" class="posts">
    {allPosts.map((post, index) => <CardEntry key={index} {...post.data} />)}
  </div>

  <div id="categories" class="categories">
    {
      CATEGORIES.map((category, index) => (
        <p class={selectedCategory === category ? "selected" : ""}>
          {category}
        </p>
      ))
    }
  </div>

  <div class="hamburger">
    &#9776; {/* Hamburger Icon */}
  </div>
</div>

<!-- <script>
  document.addEventListener('DOMContentLoaded', () => {
    const allPosts = JSON.parse({JSON.stringify(allPosts)});
    let selectedCategory = null;

    const filterPosts = (category) => {
      selectedCategory = category;
      updatePosts();
      updateCategories();
    };

    const updatePosts = () => {
      const postsContainer = document.getElementById('posts');
      postsContainer.innerHTML = '';

      const filteredPosts = allPosts.filter(post => !selectedCategory || post.category === selectedCategory);

      filteredPosts.forEach(post => {
        const postElement = document.createElement('div');
        postElement.innerHTML = `
          <div class="post">
            <h2>${post.title}</h2>
            <p>${post.excerpt}</p>
          </div>
        `;
        postsContainer.appendChild(postElement);
      });
    };

    const updateCategories = () => {
      const categoriesContainer = document.getElementById('categories');
      categoriesContainer?.querySelectorAll('p').forEach(categoryEl => {
        if (categoryEl.textContent === selectedCategory) {
          categoryEl.classList.add('selected');
        } else {
          categoryEl.classList.remove('selected');
        }
      });
    };

    const toggleCategories = () => {
      const categoriesDiv = document.getElementById('categories');
      categoriesDiv?.classList.toggle('hidden');
      categoriesDiv?.classList.toggle('visible');
    };

    document.querySelectorAll('#categories p').forEach(categoryEl => {
      categoryEl.addEventListener('click', () => filterPosts(categoryEl.textContent));
    });

    document.querySelector('.hamburger')?.addEventListener('click', toggleCategories);
  });
</script> -->
