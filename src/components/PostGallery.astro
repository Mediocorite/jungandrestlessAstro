---
import { getCollection } from "astro:content";
import CardEntry from "./common/CardEntry.astro";
import CATEGORIES from "src/content/website/categories.json";

const allPosts = await getCollection("blog");
let viewMode: "Grid" | "List" = "Grid";
---

<div class="flex">
  <div
    id="posts-container"
    class="px-4 py-16 mx-auto sm:max-w-xl md:max-w-full lg:max-w-screen-xl md:px-24 lg:px-8 lg:py-20"
  >
    <div
      id="posts-grid"
      class={viewMode === "Grid"
        ? "grid gap-8 lg:grid-cols-3 sm:max-w-sm sm:mx-auto lg:max-w-full"
        : "mb-10 border-t border-b divide-y"}
    >
      {allPosts.map((post) => <CardEntry viewMode={viewMode} {...post} />)}
    </div>
    <div class="text-center">
      <a
        href="/"
        aria-label=""
        class="inline-flex items-center font-semibold transition-colors duration-200 text-deep-purple-accent-400 hover:text-deep-purple-800"
      >
        See all articles
        <svg
          class="inline-block w-3 ml-2"
          fill="currentColor"
          viewBox="0 0 12 12"
        >
          <path
            d="M9.707,5.293l-5-5A1,1,0,0,0,3.293,1.707L7.586,6,3.293,10.293a1,1,0,1,0,1.414,1.414l5-5A1,1,0,0,0,9.707,5.293Z"
          ></path>
        </svg>
      </a>
    </div>
  </div>

  <!-- <div class="px-4 py-16 w-1/5 hidden md:block category-container">
    <h3>Categories</h3>
    {
      CATEGORIES.map((category) => (
        <p class="category-item" data-category={category}>
          {category}
        </p>
      ))
    }
  </div> -->
</div>

<style>
  .category-container {
    display: flex;
    flex-direction: column;
  }

  .category-item {
    padding: 10px;
    font-size: 18px;
    cursor: pointer;
    transition:
      background-color 0.3s ease,
      border-radius 0.3s ease,
      color 0.3s ease;
  }

  .category-item.selected {
    background-color: purple;
    border-radius: 10px 0px 0px 10px;
    color: white;
    transition-delay: 300ms;
  }

  .category-item:hover {
    background-color: rgba(128, 0, 128, 0.7);
  }

  .category-item:not(.selected) {
    background-color: transparent;
  }
</style>

<!-- <script lang="ts">
  document.addEventListener("DOMContentLoaded", () => {
    const allPosts = JSON.parse(`<?= JSON.stringify(allPosts) ?>`);
    const postsContainer = document.getElementById("posts-grid");
    const categoryItems =
      document.querySelectorAll<HTMLParagraphElement>(".category-item");
    let selectedCategory = "";

    const renderPosts = (posts) => {
      postsContainer.innerHTML = posts
        .map(
          (post) => `
        <div class="col-span-1">
          <article class="p-4 border rounded shadow">
            <h2>${post.data.title}</h2>
            <p>${post.data.excerpt}</p>
          </article>
        </div>
      `
        )
        .join("");
    };

    const filterPostsByCategory = (category) => {
      if (selectedCategory === category) {
        // Reset filter if the same category is clicked again
        selectedCategory = "";
        renderPosts(allPosts);
      } else {
        selectedCategory = category;
        const filteredPosts = allPosts.filter((post) =>
          post.data.categories.includes(category)
        );
        renderPosts(filteredPosts);
      }

      updateCategorySelectionUI();
    };

    const updateCategorySelectionUI = () => {
      categoryItems.forEach((item) => {
        item.classList.toggle(
          "selected",
          item.dataset.category === selectedCategory
        );
      });
    };

    categoryItems.forEach((item) => {
      item.addEventListener("click", () =>
        filterPostsByCategory(item.dataset.category || "")
      );
    });

    // Initial render
    renderPosts(allPosts);
  });
</script> -->
